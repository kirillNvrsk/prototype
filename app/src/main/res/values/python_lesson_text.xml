<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="python_lesson_name">
        <item>"Немного о языке"</item>
        <item>"Ввод и вывод"</item>
        <item>"Вычисления"</item>
        <item>"Условия"</item>
        <item>"Цикл for"</item>
        <item>"Строки"</item>
        <item>"Цикл while"</item>
        <item>"Списки"</item>
        <item>"Функции"</item>
        <item>"Рекурсия"</item>
        <item>"Двумерные массивы"</item>
        <item>"Словари"</item>
    </string-array>
    <string-array name="python_lesson_1">
        <item>
        "Python 3 — это современный язык, на котором просто и приятно писать программы.\n
Вот лишь некоторые вещи, которые умеет делать python:\n
Работа с xml/html файлами\n
Работа с http запросами\n
GUI (графический интерфейс)\n
Создание веб-сценариев\n
Работа с FTP\n
Работа с изображениями, аудио и видео файлами\n
Робототехникa\n
Программирование математических и научных вычислений\n
И многое, многое другое...\n
Таким образом, Python подходит для решения львиной доли повседневных задач, будь то резервное копирование, чтение электронной почты, либо же какая-нибудь игрушка. Язык программирования Python практически ничем не ограничен, поэтому также может использоваться в крупных проектах. К примеру, Python интенсивно применяется IT-гигантами, такими как, например, Google и Yandex. К тому же простота и универсальность Python делают его одним из лучших языков программирования.
Синтаксис языка Python, как и сам язык, очень прост. Конец строки является концом инструкции (точка с запятой не требуется).\n
a = int(input())\n
Вложенные инструкции объединяются в блоки по величине отступов. Используйте 4 пробела (или Tab).
Вложенные инструкции в Python записываются в соответствии с одним и тем же шаблоном, когда основная инструкция завершается двоеточием, вслед за которым располагается вложенный блок кода, обычно с отступом под строкой основной инструкции.\n
while x > k:
   \t n += 1
   \t x = k * k \n
Для установки языка на ПК перейдите по ссылке (https://www.python.org/downloads/)\n
Для установки среды разработки (https://wingware.com/downloads/wingide-101)\n"


        </item>
        <item>"Для печати значений в Питоне есть функция print(). Внутри круглых скобок через запятую мы пишем то, что хотим вывести. Вот программа, которая делает несколько вычислений:\n
print(5 + 10)\n
print(3 * 7, (17 - 2) * 8)\n
print(2 ** 16)  # две звёздочки означают возведение в степень\n
print(37 / 3)  # один слэш — это деление с ответом-дробью\n
print(37 // 3)  # два слэша считают частное от деления нацело\n
           \t\t\t     # это как операция div в других языках
print(37 % 3)  # процент считает остаток от деления нацело\n
             \t\t\t   # это как операция mod в других языках
Для ввода данных в программу мы используем функцию input(). Она считывает одну строку. \n
Вот программа, которая считывает имя пользователя и приветствует его: \n
print('Как вас зовут?') \n
name = input()  # считываем строку и кладём её в переменную name \n
print('Здравствуйте, ' + name + '!') \n
Попробуем написать программу, которая считывает два числа и выводит их сумму. Для этого считаем два числа и сохраним их в переменные a и b, пользуясь оператором присваивания =. Слева от оператора присваивания в программах на Питоне ставится имя переменной — например, строка из латинских букв. Справа от оператора присваивания ставится любое выражение: \n
a =int( input())\n
b = int(input())\n
s = a + b\n
print(s) \n

int(input()), int – Integer, то есть целочисленный тип. Если бы мы написали просто input(),  то переменные a и b были бы строковыми (String), и тогда при вызове функции ptint(s) программа вывела бы не результат вычисления, а сцепленные между собой числа. Например, при input()  a = 5, b = 6, s = ‘56’, но при указании int(input()) s = 11. \n

int(’25’) вернет число 25, а не строку ‘25’. \n


"</item>
        <item>"jjjjjjj"
        </item>
        <item>"Hello, World"</item>
    </string-array>
</resources>